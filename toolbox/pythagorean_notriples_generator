#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Mathmaker creates automatically maths exercises sheets
# with their answers
# Copyright 2006-2017 Nicolas Hainaux <nh.techn@gmail.com>

# This file is part of Mathmaker.

# Mathmaker is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Mathmaker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Mathmaker; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import random

from mathmakerlib.calculus import Number


def lucky():
    if random.choice([i for i in range(1, 100)]) <= 3:
        return True
    return False


def legs():
    min_side_value, max_side_value = int(sys.argv[1]), int(sys.argv[2])

    if min_side_value > max_side_value:
        min_side_value, max_side_value = max_side_value, min_side_value

    result = set()

    for first_leg in range(min_side_value, max_side_value + 1):
        for value in range(int(first_leg * 0.25), int(first_leg * 1.75)):
            if min_side_value <= value <= max_side_value:
                if not Number(first_leg ** 2 + value ** 2).is_perfect_square():
                    candidate = tuple(sorted((first_leg, value)) + [0, ])
                    if lucky():
                        result |= {candidate}

    print(sorted(result))


def hyp():
    min_side_value, max_side_value = int(sys.argv[1]), int(sys.argv[2])

    if min_side_value > max_side_value:
        min_side_value, max_side_value = max_side_value, min_side_value

    result = set()

    for hyp in range(min_side_value, max_side_value + 1):
        for value in range(int(hyp * 0.2), int(hyp * 0.9)):
            if min_side_value <= value <= max_side_value:
                if not Number(hyp ** 2 - value ** 2).is_perfect_square():
                    candidate = tuple(sorted((0, value, hyp)))
                    if lucky():
                        result |= {candidate}

    print(sorted(result))


if __name__ == '__main__':
    # legs()
    hyp()
