#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2006-2016 Nicolas Hainaux <nh.techn@gmail.com>

# This file is part of Mathmaker.

# Mathmaker is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# Mathmaker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Mathmaker; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


"""
This script will copy a number of msgstr from one po file to another.

Only the ones that are found in the source file but not in the destination
file will be copied. It will only put the imported msgstr in a "free"
place (an empty msgstr "" in the destination file), if there's any. It will
not import msgstr existing already in destination. It is useful to transfer
"as is" a number of msgstr from one file to another, in the case of "fake"
translation files, like w4l.po or *_names.po.
"""

import os
import sys
import errno
import argparse

import polib


def main():
    parser = argparse.ArgumentParser(description='Add strings taken '
                                                 'from a PO file '
                                                 'to another.')
    parser.add_argument('--from', action='store', dest='source_file',
                        required=True, help='the source po file to process.')
    parser.add_argument('--to', action='store', dest='dest_file',
                        required=True, help='the destination file '
                        'where to write the translations found.')
    args = parser.parse_args()

    sys.stdout.write("[Adding] Starting...\n")

    if not os.path.isfile(args.source_file):
        raise FileNotFoundError(
            errno.ENOENT, os.strerror(errno.ENOENT), args.source_file)
    if not os.path.isfile(args.dest_file):
        raise FileNotFoundError(
            errno.ENOENT, os.strerror(errno.ENOENT), args.dest_file)

    po_source = polib.pofile(args.source_file)
    po_dest = polib.pofile(args.dest_file)
    all_dest_msgstrs = [entry.msgstr for entry in po_dest]
    all_source_entries = [entry for entry in po_source if entry.msgstr != ""]
    something_changed = False

    for source_entry in all_source_entries:
        if source_entry.msgstr not in all_dest_msgstrs:
            sys.stdout.write('"' + source_entry.msgstr + '"'
                             " doesn't exist in destination...")

            for dest_entry in po_dest:
                if dest_entry.msgstr == "":
                    sys.stdout.write(" importing... ")
                    dest_entry.msgstr = source_entry.msgstr
                    sys.stdout.write(" done!\n")
                    something_changed = True
                    break
            else:
                sys.stdout.write(" but no place anymore"
                                 " to add in destination file :-/\n")

        else:
            sys.stdout.write('"' + source_entry.msgstr + '"'
                             " already exists in destination...\n")

    if something_changed:
        sys.stdout.write("Writing changes to " + args.dest_file + "\n")
        po_dest.save(args.dest_file)
    else:
        sys.stdout.write("No changes to save. " + args.dest_file
                         + " remains unchanged.\n")

    sys.stdout.write("[Adding] Done.\n\n")


if __name__ == '__main__':
    main()
