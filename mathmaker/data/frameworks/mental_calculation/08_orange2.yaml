# proportionality_problems: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: mini proportionality problems"
#   - exercise: !!omap
#     - questions: mini_pb proportionality -> mergedinttriples_15_3to6 (1)
#                  mini_pb proportionality -> mergedinttriples_25_3to6 (1)
#                  mini_pb proportionality -> mergedinttriples_3to9, force_table=7, wid=38 (1)
#                  mini_pb proportionality -> deciinttriplesforprop_3to9 (2)
#                  mini_pb proportionality -> inttriplesforprop_3to10,15,25 (5)
#                  # To select exclusively from table of 15 or from table of 25,
#                  # use mergedinttriples_*_3to6

# read abscissa, start_at_zero=true -> improper_fractions, nb1_lt=10, nb2_ge=2, nb2_lt=11, mod_neq=0 (1)
#
# [1][units conversion -> unitspairs, category=area, level=2 (1)
#     units conversion -> unitspairs, category=volume, level=3 (1)
#     units conversion -> unitspairs, dimension=1, level=2 (1)
#     units conversion -> unitspairs, dimension=1, level=3 (1)
#     units conversion -> unitspairs, category=volume2capacity, level=3 (1)
#     units conversion -> unitspairs, category=capacity2volume, level=3 (1)]

                 # [1][multi clever -> singleint_2to99 (1)
                 #     multi clever, variant=with_a_decimal -> intpairs_2to9 (1)
                 #     multi clever -> table_11_tens_easy (1)
                 #     multi clever -> table_15 (1)
                 #     multi clever -> int_deci_clever_pairs (1)
                 #     volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=4 (1)
                 #     volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=5 (1)
                 #     volume rightcuboid -> int_deci_clever_pairs;;singleint_2to99 (1)]
                 # [1][estimation_of number -> nnsingletons:70-1000 (1)
                 #     estimation_of number -> nnsingletons:1000-10000 (1)
                 #     estimation_of number -> nnsingletons:10000-100000 (1)
                 #     round number -> digits_places;;decimals, place_lt=100, nz=3, fd=3, nb1_lt=1 (6)]
                 # [1][divisibility rule, variant2=ensure_no_confusion_between_rules -> nnpairs:3×501-5000, nb2_notmod=10 (1)
                 #     divisibility rule, variant2=ensure_no_confusion_between_rules -> nnpairs:4×501-5000, nb2_notmod=10 (1)
                 #     divisibility rule, variant2=ensure_no_confusion_between_rules -> nnpairs:9×501-2500, nb2_notmod=10 (1)]
                 # [1][subtr hole, subvariant=only_positive -> singleint_11to100;;singleint_11to100 (1)
                 #     addi hole -> singleint_11to100;;singleint_11to100 (1)]
                 # fraction simplification -> singleint_3to9;;simple_fractions, reducible=0 (1)
                 # [1][divisibility vocabulary, variant=true -> intpairs_3to9 (1)
                 #     divisibility vocabulary, variant=reversed -> intpairs_3to9 (1)
                 #     divisibility vocabulary, variant=remainder -> intpairs_3to9 (1)]
                 # [1][percent direct -> 20|30|40|60|70|80|90%of..., context=simple_unit (1)
                 #     percent direct -> 5%of..., level=easy, context=simple_unit (1)]
                 # [1][mini_pb proportionality -> deciinttriplesforprop_3to9 (4)
                 #     mini_pb proportionality -> mergedinttriples_3to9 (1)
                 #     mini_pb proportionality -> mergedinttriples_3to9, force_table=7, wid=38 (1)
                 #     mini_pb proportionality -> mergedinttriples_15_3to6 (1)
                 #     mini_pb proportionality -> mergedinttriples_25_3to6 (1)]
                 # [1][digitplace direct -> digits_places (1)
                 #     digitplace reversed -> digits_places (1)
                 #     digitplace numberof -> digits_places, generation_type=default (1)
                 #     digitplace reversed -> digits_places, pos_matches_invisible_zero=true (2)
                 #     digitplace numberof -> digits_places, generation_type=default, pos_matches_invisible_zero=true (1)
                 #     addi direct, context=ask:turn_to_decimal_repr, variant=atomize, iz_ge=1 -> decimalfractionssums (1)
                 #     addi direct, context=ask:turn_to_decimal_repr, variant=cut, iz_ge=1 -> decimalfractionssums (1)
                 #     decimal numerals, direction=to_decimal -> decimals (1)
                 #     decimal numerals, direction=to_fraction -> decimals (1)]
                 # [1][addi direct, context=angles, code=2_1 -> nntriples:11-69×11-69×90 (1)
                 #     addi direct, context=angles, code=2_1 -> nntriples:11-69×11-69×11-69 (1)
                 #     addi direct, context=angles, code=1_1_1 -> nntriples:11-69×11-69×90 (1)
                 #     addi direct, context=angles, code=1_1_1 -> nntriples:11-69×11-69×11-69 (1)
                 #     addi direct, context=angles, code=3 -> nntriples:11-69×11-69×11-69 (1)
                 #     addi direct -> nnquadruples:4-20, nb_variant=±halforquarter (5)
                 #     perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_particularity=none (5)]




# fractions_simplifications: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: fractions simplifications"
#   - exercise: !!omap
#     - questions: fraction simplification -> singleint_3to9;;simple_fractions, reducible=0 (10)
#                  # fraction simplification -> mergedinttriples_3to9, code=1_1_1 (10)

# units_conversions: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: units conversions"
#   - exercise: !!omap
#     - questions: units conversion -> unitspairs, category=area, level=2 (3)
#                  units conversion -> unitspairs, category=volume, level=3 (2)
#                  units conversion -> unitspairs, level=1 (1)
#                  units conversion -> unitspairs, dimension=1, level=2 (1)
#                  units conversion -> unitspairs, dimension=1, level=3 (1)
#                  units conversion -> unitspairs, category=volume2capacity, level=3 (1)
#                  units conversion -> unitspairs, category=capacity2volume, level=3 (1)

# percentages: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: simple percentages calculations"
#   - exercise: !!omap
#     - questions: percent direct -> 20|30|40|60|70|80|90%of..., context=simple_unit (4)
#                  percent direct -> 5%of..., level=easy, context=simple_unit (2)
#                  percent direct -> 5%of..., context=simple_unit (1)
#                  percent direct -> 10%of..., nb_variant=decimal1, context=simple_unit (1)
#                  percent direct -> 25%of..., context=simple_unit (1)
#                  percent direct -> 75%of..., context=simple_unit (1)

# decimal_numerals: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: decimal numerals"
#   - exercise: !!omap
#     - questions: addi direct, context=ask:turn_to_decimal_repr, variant=atomize, iz_ge=1 -> decimalfractionssums (1)
#                  addi direct, context=ask:turn_to_decimal_repr, variant=cut -> decimalfractionssums (3)
#                  decimal numerals, direction=to_decimal -> decimals (3)
#                  decimal numerals, direction=to_fraction -> decimals (3)

# clever_calculations: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: clever additions and multiplications"
#   - exercise: !!omap
#     - questions: multi clever -> singleint_2to99 (1)
#                  multi clever, variant=with_a_decimal -> intpairs_2to9 (1)
#                  multi clever -> table_11_tens_easy (1)
#                  multi clever -> table_15 (1)
#                  multi clever -> int_deci_clever_pairs (1)
#                  volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=4 (1)
#                  volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=5 (1)
#                  volume rightcuboid -> int_deci_clever_pairs;;singleint_2to99 (1)
#                  addi direct -> complements_to_20...90;;complements_to_20...90, patch=true (2)
#                  # "patch" is to use all pairs as complements

#
# addi_subtr_hole: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: additions and subtractions with a hole"
#   - exercise: !!omap
#     - questions: addi hole -> singleint_5to20;;singleint_5to20 (2)
#                  addi hole -> singleint_21to100;;singleint_21to100 (1)
#                  addi hole -> complements_to_20...90 (2)
#                  subtr hole, subvariant=only_positive -> singleint_5to20;;singleint_5to20 (2)
#                  subtr hole, subvariant=only_positive -> singleint_21to100;;singleint_21to100 (2)
#                  subtr hole, subvariant=only_positive, hidden=2 -> complements_to_100 (1)
#

# addi_subtr_hole: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: additions and subtractions with a hole"
#   - exercise: !!omap
#     - questions: addi hole -> singleint_5to20;;singleint_5to20, nb_variant=±half (1)
#                  addi hole -> singleint_5to20;;singleint_5to20, nb_variant=±quarter (1)
#                  addi hole -> singleint_5to20;;singleint_5to20, nb_variant=±halforquarter (1)
#                  addi hole -> singleint_70to200;;singleint_70to200, nb_variant=decimal2 (1)
#                  subtr hole, subvariant=only_positive -> singleint_70to200;;singleint_70to200, nb_variant=decimal2 (1)
#                  subtr hole, subvariant=only_positive, hidden=1 -> complements_to_1, nb_variant=decimal1 (1)
#                  subtr hole, subvariant=only_positive, hidden=2 -> complements_to_1, nb_variant=decimal1 (1)
#                  subtr hole, subvariant=only_positive, hidden=1 -> complements_to_10, nb_variant=decimal1 (1)
#                  subtr hole, subvariant=only_positive, hidden=2 -> complements_to_10, nb_variant=decimal1 (1)
#                  addi hole -> complements_to_10, nb_variant=decimal2 (1)


# compendium: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: compendium"
#   - exercise: !!omap
#     - questions: volume rightcuboid -> nntriples:2-3×2-3×2-9 (1)
#                  addi direct -> nnquadruples:4-20, nb_variant=±halforquarter (1)
#                  [1][mini_pb proportionality -> mergedinttriples_15_3to6 (1)
#                      mini_pb proportionality -> mergedinttriples_25_3to6 (1)]
#                  mini_pb proportionality -> deciinttriplesforprop_3to9 (1)
#                  addi hole -> singleint_11to100;;singleint_11to100 (1)
#                  subtr hole, subvariant=only_positive -> singleint_11to100;;singleint_11to100 (1)
#                  [2][addi direct, context=angles, code=2_1 -> nntriples:11-69×11-69×90 (1)
#                      addi direct, context=angles, code=2_1 -> nntriples:11-69×11-69×11-69 (1)
#                      addi direct, context=angles, code=1_1_1 -> nntriples:11-69×11-69×90 (1)
#                      addi direct, context=angles, code=1_1_1 -> nntriples:11-69×11-69×11-69 (1)
#                      addi direct, context=angles, code=3 -> nntriples:11-69×11-69×11-69 (1)]
#                  [2][time_units conversion, category=2, direction=right -> nnpairs:1-3,5-7,9-11,13-14×15 (1)
#                      time_units conversion, category=2, direction=left -> nnpairs:1-3,5-7,9-11,13-14×15 (1)
#                      time_units conversion, category=3, direction=right -> nnpairs:5-7,9-11,13-14×15 (1)
#                      time_units conversion, category=3, direction=left -> nnpairs:5-7,9-11,13-14×15 (1)]

# perimeters_areas_volumes: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: perimeters, areas and volumes"
#   - exercise: !!omap
#     - questions: perimeter righttriangle -> nnpairs:3-9×3-9, code=1_1 (1)
#                  [1][perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=1 (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_particularity=none (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_nb=4, sides_particularity=equilateral (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=2 (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=3 (1)]
#                  area righttriangle -> nnpairs:3-9×3-9, code=1_1 (1)
#                  area rectangle, picture=true -> intpairs_2to9, nb_variant=decimal (1)
#                  area rectangle, picture=true -> nnpairs:3-6×15,25 (1)
#                  area rectangle, picture=true -> table_11_tens_easy (1)
#                  [1][perimeter rectangle, picture=true -> intpairs_2to9, nb_variant=decimal (1)
#                      perimeter rectangle, picture=true -> table_25 (1)
#                      perimeter rectangle, picture=true -> nnpairs:3-9,11-19×3-9,11-19, nb_variant=decimal (1)]
#                  volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=4 (1)
#                  volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=5 (1)
#                  volume rightcuboid -> int_deci_clever_pairs;;singleint_2to99 (1)

# areas_perimeters_angles: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: areas, perimeters, angles"
#   - exercise: !!omap
#     - questions: area righttriangle -> nnpairs:3-9×3-9, code=1_1 (2)
#                  [2][area rectangle, picture=true -> nnpairs:4-9×6-9 (1)
#                      area rectangle, picture=true -> nnpairs:2-9×2-9, nb_variant=decimal (1)
#                      area rectangle, picture=true -> table_11_tens_easy (1)
#                      area rectangle, picture=true -> nnpairs:3-6×15,25 (1)]
#                  [2][perimeter rectangle, picture=true -> intpairs_2to9, nb_variant=decimal (1)
#                      perimeter rectangle, picture=true -> table_25 (1)
#                      perimeter rectangle, picture=true -> nnpairs:3-9,11-19×3-9,11-19, nb_variant=decimal1 (1)]
#                  [2][perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=1 (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_particularity=none (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_nb=4, sides_particularity=equilateral (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=2 (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=3 (1)]
#                  [2][addi direct, context=angles -> nnpairs:11-69×90 (1)
#                      addi direct, context=angles -> nnpairs:11-69×11-69 (1)
#                      subtr direct, subvariant=only_positive, context=angles -> nnpairs:11-69×90 (1)
#                      subtr direct, subvariant=only_positive, context=angles, code=1_1 -> nnpairs:11-69×11-69 (1)]

# read abscissa, start_at_zero=true -> improper_fractions, nb1_lt=10, nb2_ge=2, nb2_lt=11, mod_neq=0 (1)
#
# [1][units conversion -> unitspairs, category=area, level=2 (1)
#     units conversion -> unitspairs, category=volume, level=3 (1)
#     units conversion -> unitspairs, dimension=1, level=2 (1)
#     units conversion -> unitspairs, dimension=1, level=3 (1)
#     units conversion -> unitspairs, category=volume2capacity, level=3 (1)
#     units conversion -> unitspairs, category=capacity2volume, level=3 (1)]

                 # [1][multi clever -> singleint_2to99 (1)
                 #     multi clever, variant=with_a_decimal -> intpairs_2to9 (1)
                 #     multi clever -> table_11_tens_easy (1)
                 #     multi clever -> table_15 (1)
                 #     multi clever -> int_deci_clever_pairs (1)
                 #     volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=4 (1)
                 #     volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=5 (1)
                 #     volume rightcuboid -> int_deci_clever_pairs;;singleint_2to99 (1)]
                 # [1][estimation_of number -> nnsingletons:70-1000 (1)
                 #     estimation_of number -> nnsingletons:1000-10000 (1)
                 #     estimation_of number -> nnsingletons:10000-100000 (1)
                 #     round number -> digits_places;;decimals, place_lt=100, nz=3, fd=3, nb1_lt=1 (6)]
                 # [1][divisibility rule, variant2=ensure_no_confusion_between_rules -> nnpairs:3×501-5000, nb2_notmod=10 (1)
                 #     divisibility rule, variant2=ensure_no_confusion_between_rules -> nnpairs:4×501-5000, nb2_notmod=10 (1)
                 #     divisibility rule, variant2=ensure_no_confusion_between_rules -> nnpairs:9×501-2500, nb2_notmod=10 (1)]
                 # [1][subtr hole, subvariant=only_positive -> singleint_11to100;;singleint_11to100 (1)
                 #     addi hole -> singleint_11to100;;singleint_11to100 (1)]
                 # fraction simplification -> singleint_3to9;;simple_fractions, reducible=0 (1)
                 # [1][divisibility vocabulary, variant=true -> intpairs_3to9 (1)
                 #     divisibility vocabulary, variant=reversed -> intpairs_3to9 (1)
                 #     divisibility vocabulary, variant=remainder -> intpairs_3to9 (1)]
                 # [1][percent direct -> 20|30|40|60|70|80|90%of..., context=simple_unit (1)
                 #     percent direct -> 5%of..., level=easy, context=simple_unit (1)]
                 # [1][mini_pb proportionality -> deciinttriplesforprop_3to9 (4)
                 #     mini_pb proportionality -> mergedinttriples_3to9 (1)
                 #     mini_pb proportionality -> mergedinttriples_3to9, force_table=7, wid=38 (1)
                 #     mini_pb proportionality -> mergedinttriples_15_3to6 (1)
                 #     mini_pb proportionality -> mergedinttriples_25_3to6 (1)]
                 # [1][digitplace direct -> digits_places (1)
                 #     digitplace reversed -> digits_places (1)
                 #     digitplace numberof -> digits_places, generation_type=default (1)
                 #     digitplace reversed -> digits_places, pos_matches_invisible_zero=true (2)
                 #     digitplace numberof -> digits_places, generation_type=default, pos_matches_invisible_zero=true (1)
                 #     addi direct, context=ask:turn_to_decimal_repr, variant=atomize, iz_ge=1 -> decimalfractionssums (1)
                 #     addi direct, context=ask:turn_to_decimal_repr, variant=cut, iz_ge=1 -> decimalfractionssums (1)
                 #     decimal numerals, direction=to_decimal -> decimals (1)
                 #     decimal numerals, direction=to_fraction -> decimals (1)]
                 # [1][addi direct, context=angles, code=2_1 -> nntriples:11-69×11-69×90 (1)
                 #     addi direct, context=angles, code=2_1 -> nntriples:11-69×11-69×11-69 (1)
                 #     addi direct, context=angles, code=1_1_1 -> nntriples:11-69×11-69×90 (1)
                 #     addi direct, context=angles, code=1_1_1 -> nntriples:11-69×11-69×11-69 (1)
                 #     addi direct, context=angles, code=3 -> nntriples:11-69×11-69×11-69 (1)
                 #     addi direct -> nnquadruples:4-20, nb_variant=±halforquarter (5)
                 #     perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_particularity=none (5)]






# units_conversions: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: units conversions"
#   - exercise: !!omap
#     - questions: units conversion -> unitspairs, category=area, level=2 (3)
#                  units conversion -> unitspairs, category=volume, level=3 (2)
#                  units conversion -> unitspairs, level=1 (1)
#                  units conversion -> unitspairs, dimension=1, level=2 (1)
#                  units conversion -> unitspairs, dimension=1, level=3 (1)
#                  units conversion -> unitspairs, category=volume2capacity, level=3 (1)
#                  units conversion -> unitspairs, category=capacity2volume, level=3 (1)

# percentages: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: simple percentages calculations"
#   - exercise: !!omap
#     - questions: percent direct -> 20|30|40|60|70|80|90%of..., context=simple_unit (4)
#                  percent direct -> 5%of..., level=easy, context=simple_unit (2)
#                  percent direct -> 5%of..., context=simple_unit (1)
#                  percent direct -> 10%of..., nb_variant=decimal1, context=simple_unit (1)
#                  percent direct -> 25%of..., context=simple_unit (1)
#                  percent direct -> 75%of..., context=simple_unit (1)





#
# addi_subtr_hole: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: additions and subtractions with a hole"
#   - exercise: !!omap
#     - questions: addi hole -> singleint_5to20;;singleint_5to20 (2)
#                  addi hole -> singleint_21to100;;singleint_21to100 (1)
#                  addi hole -> complements_to_20...90 (2)
#                  subtr hole, subvariant=only_positive -> singleint_5to20;;singleint_5to20 (2)
#                  subtr hole, subvariant=only_positive -> singleint_21to100;;singleint_21to100 (2)
#                  subtr hole, subvariant=only_positive, hidden=2 -> complements_to_100 (1)
#

# addi_subtr_hole: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: additions and subtractions with a hole"
#   - exercise: !!omap
#     - questions: addi hole -> singleint_5to20;;singleint_5to20, nb_variant=±half (1)
#                  addi hole -> singleint_5to20;;singleint_5to20, nb_variant=±quarter (1)
#                  addi hole -> singleint_5to20;;singleint_5to20, nb_variant=±halforquarter (1)
#                  addi hole -> singleint_70to200;;singleint_70to200, nb_variant=decimal2 (1)
#                  subtr hole, subvariant=only_positive -> singleint_70to200;;singleint_70to200, nb_variant=decimal2 (1)
#                  subtr hole, subvariant=only_positive, hidden=1 -> complements_to_1, nb_variant=decimal1 (1)
#                  subtr hole, subvariant=only_positive, hidden=2 -> complements_to_1, nb_variant=decimal1 (1)
#                  subtr hole, subvariant=only_positive, hidden=1 -> complements_to_10, nb_variant=decimal1 (1)
#                  subtr hole, subvariant=only_positive, hidden=2 -> complements_to_10, nb_variant=decimal1 (1)
#                  addi hole -> complements_to_10, nb_variant=decimal2 (1)


# compendium: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: compendium"
#   - exercise: !!omap
#     - questions: volume rightcuboid -> nntriples:2-3×2-3×2-9 (1)
#                  addi direct -> nnquadruples:4-20, nb_variant=±halforquarter (1)
#                  [1][mini_pb proportionality -> mergedinttriples_15_3to6 (1)
#                      mini_pb proportionality -> mergedinttriples_25_3to6 (1)]
#                  mini_pb proportionality -> deciinttriplesforprop_3to9 (1)
#                  addi hole -> singleint_11to100;;singleint_11to100 (1)
#                  subtr hole, subvariant=only_positive -> singleint_11to100;;singleint_11to100 (1)
#                  [2][addi direct, context=angles, code=2_1 -> nntriples:11-69×11-69×90 (1)
#                      addi direct, context=angles, code=2_1 -> nntriples:11-69×11-69×11-69 (1)
#                      addi direct, context=angles, code=1_1_1 -> nntriples:11-69×11-69×90 (1)
#                      addi direct, context=angles, code=1_1_1 -> nntriples:11-69×11-69×11-69 (1)
#                      addi direct, context=angles, code=3 -> nntriples:11-69×11-69×11-69 (1)]
#                  [2][time_units conversion, category=2, direction=right -> nnpairs:1-3,5-7,9-11,13-14×15 (1)
#                      time_units conversion, category=2, direction=left -> nnpairs:1-3,5-7,9-11,13-14×15 (1)
#                      time_units conversion, category=3, direction=right -> nnpairs:5-7,9-11,13-14×15 (1)
#                      time_units conversion, category=3, direction=left -> nnpairs:5-7,9-11,13-14×15 (1)]

# perimeters_areas_volumes: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: perimeters, areas and volumes"
#   - exercise: !!omap
#     - questions: perimeter righttriangle -> nnpairs:3-9×3-9, code=1_1 (1)
#                  [1][perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=1 (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_particularity=none (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_nb=4, sides_particularity=equilateral (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=2 (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=3 (1)]
#                  area righttriangle -> nnpairs:3-9×3-9, code=1_1 (1)
#                  area rectangle, picture=true -> intpairs_2to9, nb_variant=decimal (1)
#                  area rectangle, picture=true -> nnpairs:3-6×15,25 (1)
#                  area rectangle, picture=true -> table_11_tens_easy (1)
#                  [1][perimeter rectangle, picture=true -> intpairs_2to9, nb_variant=decimal (1)
#                      perimeter rectangle, picture=true -> table_25 (1)
#                      perimeter rectangle, picture=true -> nnpairs:3-9,11-19×3-9,11-19, nb_variant=decimal (1)]
#                  volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=4 (1)
#                  volume rightcuboid -> intpairs_2to500;;singleint_2to99, clever=5 (1)
#                  volume rightcuboid -> int_deci_clever_pairs;;singleint_2to99 (1)

# areas_perimeters_angles: !!omap
#   - preset: "mental calculation"
#   - title: "Mental calculation: areas, perimeters, angles"
#   - exercise: !!omap
#     - questions: area righttriangle -> nnpairs:3-9×3-9, code=1_1 (2)
#                  [2][area rectangle, picture=true -> nnpairs:4-9×6-9 (1)
#                      area rectangle, picture=true -> nnpairs:2-9×2-9, nb_variant=decimal (1)
#                      area rectangle, picture=true -> table_11_tens_easy (1)
#                      area rectangle, picture=true -> nnpairs:3-6×15,25 (1)]
#                  [2][perimeter rectangle, picture=true -> intpairs_2to9, nb_variant=decimal (1)
#                      perimeter rectangle, picture=true -> table_25 (1)
#                      perimeter rectangle, picture=true -> nnpairs:3-9,11-19×3-9,11-19, nb_variant=decimal1 (1)]
#                  [2][perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=1 (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_particularity=none (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±quarter, sides_nb=4, sides_particularity=equilateral (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=2 (1)
#                      perimeter polygon -> polygons, sum_ingredients=int_2to10, nb_variant=±half, level=3 (1)]
#                  [2][addi direct, context=angles -> nnpairs:11-69×90 (1)
#                      addi direct, context=angles -> nnpairs:11-69×11-69 (1)
#                      subtr direct, subvariant=only_positive, context=angles -> nnpairs:11-69×90 (1)
#                      subtr direct, subvariant=only_positive, context=angles, code=1_1 -> nnpairs:11-69×11-69 (1)]

